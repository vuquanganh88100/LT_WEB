import React, { useState, useEffect } from 'react';
import {
  Layout, Typography, Button, Tag, Avatar, Row, Col, Card, Divider, 
  Space, Tooltip, Popconfirm, Modal, Form, Input, Select, message,
  Descriptions, Timeline, Table
} from 'antd';
import {
  ArrowLeftOutlined, UserOutlined, CalendarOutlined, EyeOutlined, 
  LikeOutlined, CommentOutlined, EditOutlined, DeleteOutlined,
  CheckCircleOutlined, CloseCircleOutlined, ExclamationCircleOutlined,
  HistoryOutlined, MessageOutlined, SettingOutlined
} from '@ant-design/icons';
import { useLocation, useParams, useNavigate } from 'react-router-dom';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { format } from 'date-fns';
import './PostAdminDetail.css';

const { Content } = Layout;
const { Title, Paragraph, Text } = Typography;
const { TextArea } = Input;
const { Option } = Select;

// Constants
const POST_STATUS = {
  draft: { color: 'default', text: 'B·∫£n nh√°p', icon: <EditOutlined /> },
  pending: { color: 'gold', text: 'Ch·ªù duy·ªát', icon: <ExclamationCircleOutlined /> },
  published: { color: 'green', text: 'ƒê√£ xu·∫•t b·∫£n', icon: <CheckCircleOutlined /> },
  rejected: { color: 'red', text: 'T·ª´ ch·ªëi', icon: <CloseCircleOutlined /> }
};

// Fake comments data
const fakeComments = [
  {
    id: 1,
    author: "Nguy·ªÖn VƒÉn A",
    content: "B√†i vi·∫øt r·∫•t hay v√† b·ªï √≠ch! C·∫£m ∆°n t√°c gi·∫£ ƒë√£ chia s·∫ª.",
    createdAt: "2023-12-01T10:30:00Z",
    status: "approved"
  },
  {
    id: 2,
    author: "Tr·∫ßn Th·ªã B", 
    content: "M√¨nh ƒë√£ √°p d·ª•ng nh·ªØng g√¨ ƒë∆∞·ª£c chia s·∫ª v√† th·∫•y hi·ªáu qu·∫£ r·∫•t t·ªët.",
    createdAt: "2023-12-01T14:15:00Z",
    status: "approved"
  },
  {
    id: 3,
    author: "Spam User",
    content: "Click here to win money!!! ü§ëü§ëü§ë",
    createdAt: "2023-12-02T09:20:00Z",
    status: "pending"
  }
];

// Fake activity history
const fakeHistory = [
  {
    time: "2023-12-02T10:30:00Z",
    action: "T·∫°o b√†i vi·∫øt",
    user: "L√™ Minh C",
    details: "B√†i vi·∫øt ƒë∆∞·ª£c t·∫°o v·ªõi tr·∫°ng th√°i 'B·∫£n nh√°p'"
  },
  {
    time: "2023-12-02T11:00:00Z", 
    action: "C·∫≠p nh·∫≠t n·ªôi dung",
    user: "L√™ Minh C",
    details: "Th√™m ph·∫ßn gi·ªõi thi·ªáu v√† c·∫≠p nh·∫≠t danh m·ª•c"
  },
  {
    time: "2023-12-02T11:30:00Z",
    action: "G·ª≠i duy·ªát",
    user: "L√™ Minh C", 
    details: "Chuy·ªÉn tr·∫°ng th√°i t·ª´ 'B·∫£n nh√°p' sang 'Ch·ªù duy·ªát'"
  }
];

const PostAdminDetail = () => {
  const location = useLocation();
  const { postId } = useParams();
  const navigate = useNavigate();
  const [form] = Form.useForm();
  
  const [post, setPost] = useState(null);
  const [comments, setComments] = useState(fakeComments);
  const [history, setHistory] = useState(fakeHistory);
  const [editModalVisible, setEditModalVisible] = useState(false);
  const [statusModalVisible, setStatusModalVisible] = useState(false);
  const [loading, setLoading] = useState(false);
  const [rejectionReason, setRejectionReason] = useState('');

  // Get post data from navigation state or fake data
  useEffect(() => {
    const postData = location.state?.post || {
      id: postId,
      title: "C∆° h·ªôi vi·ªác l√†m cho sinh vi√™n IT sau t·ªët nghi·ªáp",
      content: `# C∆° h·ªôi vi·ªác l√†m cho sinh vi√™n IT

## T·ªïng quan th·ªã tr∆∞·ªùng IT Vi·ªát Nam

Ng√†nh **C√¥ng ngh·ªá th√¥ng tin** ƒëang ph√°t tri·ªÉn m·∫°nh m·∫Ω t·∫°i Vi·ªát Nam v·ªõi nhi·ªÅu c∆° h·ªôi vi·ªác l√†m h·∫•p d·∫´n.

### C√°c v·ªã tr√≠ hot nh·∫•t:

1. **Frontend Developer**
   - React, Vue.js, Angular
   - M·ª©c l∆∞∆°ng: 8-25 tri·ªáu VND

2. **Backend Developer**
   - Node.js, Java, Python  
   - M·ª©c l∆∞∆°ng: 10-30 tri·ªáu VND

3. **Full-stack Developer**
   - K·∫øt h·ª£p c·∫£ frontend v√† backend
   - M·ª©c l∆∞∆°ng: 15-35 tri·ªáu VND

### K·ªπ nƒÉng c·∫ßn thi·∫øt:

- Th√†nh th·∫°o √≠t nh·∫•t 1 ng√¥n ng·ªØ l·∫≠p tr√¨nh
- Hi·ªÉu bi·∫øt v·ªÅ *database* v√† *API*
- K·ªπ nƒÉng l√†m vi·ªác nh√≥m
- T∆∞ duy logic v√† gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ

> **L·ªùi khuy√™n**: H√£y x√¢y d·ª±ng portfolio m·∫°nh v·ªõi c√°c d·ª± √°n th·ª±c t·∫ø ƒë·ªÉ tƒÉng c∆° h·ªôi ƒë∆∞·ª£c tuy·ªÉn d·ª•ng.`,
      status: "pending",
      authorId: 42,
      authorName: "L√™ Minh C",
      authorEmail: "leminhc@example.com",
      createdAt: "2023-11-10T09:20:00Z",
      updatedAt: "2023-11-10T09:20:00Z",
      views: 543,
      likes: 32,
      comments: 12,
      categories: ["Vi·ªác l√†m", "IT"],
      tags: ["career", "it-jobs", "vietnam", "salary"],
      featured: false,
      seoTitle: "C∆° h·ªôi vi·ªác l√†m IT 2024 - M·ª©c l∆∞∆°ng v√† k·ªπ nƒÉng c·∫ßn thi·∫øt",
      seoDescription: "T√¨m hi·ªÉu v·ªÅ c∆° h·ªôi vi·ªác l√†m trong ng√†nh IT t·∫°i Vi·ªát Nam, m·ª©c l∆∞∆°ng trung b√¨nh v√† c√°c k·ªπ nƒÉng c·∫ßn thi·∫øt ƒë·ªÉ th√†nh c√¥ng.",
      readTime: 5
    };
    setPost(postData);
  }, [location.state, postId]);

  const handleGoBack = () => {
    navigate('/admin/posts');
  };

  const handleStatusUpdate = async (newStatus, reason = '') => {
    setLoading(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      setPost(prev => ({
        ...prev,
        status: newStatus,
        updatedAt: new Date().toISOString(),
        rejectionReason: newStatus === 'rejected' ? reason : undefined
      }));

      // Add to history
      const newHistoryItem = {
        time: new Date().toISOString(),
        action: `C·∫≠p nh·∫≠t tr·∫°ng th√°i`,
        user: "Admin",
        details: `Chuy·ªÉn tr·∫°ng th√°i sang '${POST_STATUS[newStatus].text}'${reason ? `. L√Ω do: ${reason}` : ''}`
      };
      setHistory(prev => [newHistoryItem, ...prev]);

      message.success(`ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh '${POST_STATUS[newStatus].text}'`);
      setStatusModalVisible(false);
      setRejectionReason('');
    } catch (error) {
      message.error('C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t tr·∫°ng th√°i');
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async () => {
    setLoading(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      message.success('ƒê√£ x√≥a b√†i vi·∫øt th√†nh c√¥ng');
      navigate('/admin/posts');
    } catch (error) {
      message.error('C√≥ l·ªói x·∫£y ra khi x√≥a b√†i vi·∫øt');
    } finally {
      setLoading(false);
    }
  };

  const handleCommentStatusUpdate = (commentId, newStatus) => {
    setComments(prev => 
      prev.map(comment => 
        comment.id === commentId 
          ? { ...comment, status: newStatus }
          : comment
      )
    );
    message.success(`ƒê√£ ${newStatus === 'approved' ? 'duy·ªát' : 't·ª´ ch·ªëi'} b√¨nh lu·∫≠n`);
  };

  const handleCommentDelete = (commentId) => {
    setComments(prev => prev.filter(comment => comment.id !== commentId));
    message.success('ƒê√£ x√≥a b√¨nh lu·∫≠n');
  };

  const formatDate = (dateString) => {
    try {
      return format(new Date(dateString), 'dd/MM/yyyy HH:mm');
    } catch (error) {
      return dateString;
    }
  };

  const renderContent = (content) => {
    if (!content) return null;
    
    const hasMarkdown = content.includes('#') || content.includes('```') || content.includes('**') || content.includes('*') || content.includes('[');
    
    if (hasMarkdown) {
      return (
        <div className="markdown-content">
          <ReactMarkdown remarkPlugins={[remarkGfm]}>
            {content}
          </ReactMarkdown>
        </div>
      );
    } else {
      const paragraphs = content.split('\n\n');
      return paragraphs.map((paragraph, index) => (
        <Paragraph key={index} style={{ marginBottom: '16px', lineHeight: '1.8' }}>
          {paragraph}
        </Paragraph>
      ));
    }
  };

  const renderPostStatus = (status) => {
    const statusConfig = POST_STATUS[status] || { 
      color: 'default', 
      text: 'Kh√¥ng x√°c ƒë·ªãnh', 
      icon: null 
    };
    return (
      <Tag icon={statusConfig.icon} color={statusConfig.color} style={{ fontSize: '14px', padding: '4px 12px' }}>
        {statusConfig.text}
      </Tag>
    );
  };

  // Comments table columns
  const commentColumns = [
    {
      title: 'T√°c gi·∫£',
      dataIndex: 'author',
      key: 'author',
      width: 150
    },
    {
      title: 'N·ªôi dung',
      dataIndex: 'content',
      key: 'content',
      render: (text) => (
        <div style={{ maxWidth: 300, wordBreak: 'break-word' }}>
          {text}
        </div>
      )
    },
    {
      title: 'Th·ªùi gian',
      dataIndex: 'createdAt',
      key: 'createdAt',
      width: 140,
      render: formatDate
    },
    {
      title: 'Tr·∫°ng th√°i',
      dataIndex: 'status',
      key: 'status',
      width: 100,
      render: (status) => (
        <Tag color={status === 'approved' ? 'green' : status === 'pending' ? 'gold' : 'red'}>
          {status === 'approved' ? 'ƒê√£ duy·ªát' : status === 'pending' ? 'Ch·ªù duy·ªát' : 'T·ª´ ch·ªëi'}
        </Tag>
      )
    },
    {
      title: 'Thao t√°c',
      key: 'actions',
      width: 150,
      render: (_, record) => (
        <Space size="small">
          {record.status === 'pending' && (
            <>
              <Button
                type="primary"
                size="small"
                icon={<CheckCircleOutlined />}
                onClick={() => handleCommentStatusUpdate(record.id, 'approved')}
              >
                Duy·ªát
              </Button>
              <Button
                danger
                size="small"
                icon={<CloseCircleOutlined />}
                onClick={() => handleCommentStatusUpdate(record.id, 'rejected')}
              >
                T·ª´ ch·ªëi
              </Button>
            </>
          )}
          <Button
            danger
            size="small"
            icon={<DeleteOutlined />}
            onClick={() => handleCommentDelete(record.id)}
          />
        </Space>
      )
    }
  ];

  if (!post) {
    return <div>Loading...</div>;
  }

  return (
    <div className="admin-post-detail-container">
      <Content style={{ padding: '24px' }}>
        <div className="admin-post-detail-content">
          {/* Header */}
          <div className="admin-header">
            <Button 
              icon={<ArrowLeftOutlined />} 
              onClick={handleGoBack}
              className="back-button"
            >
              Quay l·∫°i danh s√°ch
            </Button>
          </div>

          <Row gutter={24}>
            {/* Main Content */}
            <Col xs={24} lg={24}>
              <Card className="main-content-card">
                <div className="post-header">
                  <Title level={1} className="post-title">
                    {post.title}
                  </Title>
                  
                  <div className="post-meta">
                    <Space size="large">
                      <div className="author-info">
                        <Avatar icon={<UserOutlined />} />
                        <div>
                          <div className="author-name">{post.authorName}</div>
                          <div className="author-email">{post.authorEmail}</div>
                        </div>
                      </div>
                      
                      <div className="post-dates">
                        <div><CalendarOutlined /> T·∫°o: {formatDate(post.createdAt)}</div>
                        <div><CalendarOutlined /> C·∫≠p nh·∫≠t: {formatDate(post.updatedAt)}</div>
                      </div>
                      
                      <div className="post-stats">
                        <span><EyeOutlined /> {post.views}</span>
                        <span><LikeOutlined /> {post.likes}</span>
                        <span><CommentOutlined /> {comments.length}</span>
                      </div>
                    </Space>
                  </div>

                  <div className="post-status-section">
                    {renderPostStatus(post.status)}
                    {post.featured && <Tag color="orange">N·ªïi b·∫≠t</Tag>}
                  </div>
                </div>

                <Divider />

                <div className="post-content">
                  {renderContent(post.content)}
                </div>
              </Card>

              {/* Comments Management */}
              
            </Col>
          </Row>
        </div>
      </Content>

      {/* Status Management Modal */}
      <Modal
        title="Qu·∫£n l√Ω tr·∫°ng th√°i b√†i vi·∫øt"
        open={statusModalVisible}
        onCancel={() => setStatusModalVisible(false)}
        footer={null}
      >
        <Space direction="vertical" style={{ width: '100%' }}>
          <div>Tr·∫°ng th√°i hi·ªán t·∫°i: {renderPostStatus(post.status)}</div>
          
          <Divider />
          
          <Space wrap>
            {post.status !== 'published' && (
              <Button
                type="primary"
                icon={<CheckCircleOutlined />}
                onClick={() => handleStatusUpdate('published')}
                loading={loading}
              >
                Duy·ªát & Xu·∫•t b·∫£n
              </Button>
            )}
            
            {post.status !== 'draft' && (
              <Button
                icon={<EditOutlined />}
                onClick={() => handleStatusUpdate('draft')}
                loading={loading}
              >
                Chuy·ªÉn v·ªÅ b·∫£n nh√°p
              </Button>
            )}
            
            {post.status !== 'rejected' && (
              <div style={{ width: '100%' }}>
                <TextArea
                  placeholder="L√Ω do t·ª´ ch·ªëi (t√πy ch·ªçn)"
                  value={rejectionReason}
                  onChange={(e) => setRejectionReason(e.target.value)}
                  rows={3}
                  style={{ marginBottom: 8 }}
                />
                <Button
                  danger
                  icon={<CloseCircleOutlined />}
                  onClick={() => handleStatusUpdate('rejected', rejectionReason)}
                  loading={loading}
                >
                  T·ª´ ch·ªëi
                </Button>
              </div>
            )}
          </Space>
        </Space>
      </Modal>
    </div>
  );
};

export default PostAdminDetail;